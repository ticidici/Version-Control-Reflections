+ What happens when you initialize a repository? Why do you need to do it?
- A .git folder gets created. You need it to be able to commit.
+ How is the staging area different from the working directory and the repository? What value do you think it offers?
- The staging area shows the files you want to track for your next commit. It allows you flexibility to commit only what you want.
+ How can you use the staging area to make sure you have one commit per logical change?
- By staging only the files that relate to the logical change, leaving the others for a future commit.
+ What are some situations when branches would be helpful in keeping your history organized? How would branches help?
- Situations when you want to try something out, but you want to keep a main functional version in the mean time.
+ How do the diagrams help you visualize the branch structure?
- By visually telling you where various branches diverged.
+ What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
- Having all the features of both branches together. We represent it as two branches merging because the new branch keeps the commit history of both branches.
+ What are the pros and cons of Git’s automatic merging vs. always doing merges manually?
- If there are not conflicts it is pretty fast and convenient, but otherwise you better fix the conflicts manually. 